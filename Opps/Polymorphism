 // Polymorphism: is the ability of objects to take on different forms or behave in different ways depending on the context in which they are used.

// #include <iostream>
// using namespace std;

// class Student{
// public:
//     string name;

//     Student(){
//       cout << "non-parameterized\n";
//     }

//     Student(string name) {
//       this->name = name;
//       cout << "parameterized\n";
//     }
// };
// int main() {
//   Student s1("Rao");
//   return 0;
// }

// Compile Time Polymorphism :

// Function Overloading.

// #include <iostream>
// using namespace std;

// class Print{
// public:
//    void show(int x){
//      cout << "int : " << x << endl;
//    }

//    void show(char ch){
//      cout << "char : " << ch << endl;
//    }
// };
// int main() {
//   Print p1;
//   p1.show('&');
//   return 0;
// }
// Operator Overloading: ek he class k under two function bana.

// #include <iostream>
// using namespace std;

// class Complex {
// private:
//     double real;
//     double imag;

// public:
//     // Constructor
//     Complex(double r = 0, double i = 0) : real(r), imag(i) {}

//     // Overload the + operator to add two Complex numbers
//     Complex operator + (const Complex &other) const {
//         return Complex(real + other.real, imag + other.imag);
//     }

//     // Overload the << operator to print a Complex number
//     friend ostream& operator << (ostream &out, const Complex &c);
// };

// // Implementation of the << operator
// ostream& operator << (ostream &out, const Complex &c) {
//     out << c.real << " + " << c.imag << "i";
//     return out;
// }

// int main() {
//     // Create two Complex numbers
//     Complex c1(3.0, 4.0);
//     Complex c2(1.5, 2.5);

//     // Add the two Complex numbers using the overloaded + operator
//     Complex c3 = c1 + c2;

//     // Print the Complex numbers using the overloaded << operator
//     cout << "c1: " << c1 << endl;
//     cout << "c2: " << c2 << endl;
//     cout << "c1 + c2 = " << c3 << endl;

//     return 0;
// }


// Run Time Polymorphism / Dynamic Polymorphism : For example:
// Function Overriding: Parenet & child both contain the  same function with different implementation. The parent class function is said to be overridden.

// #include <iostream>
// using namespace std;

// class Parent{
// public:
//     void getInfo(){
//       cout << "parent class\n";
//     }
// };

// class Child : public Parent{
// public:
//     void getInfo(){
//       cout << "child class\n";
//     }
// };
// int main() {
//   Child c1;
//   c1.getInfo();
//   return 0;
// }

// Second Example: Virtual Functions: A virtual function is a member function that you expect to be redefined in derived classes.

#include <iostream>
using namespace std;

class Parent{
public:
    void getInfo(){
      cout << "parent class\n";
    }

    virtual void hello() {
      cout<< "hello from parant\n";
    }
};

class Child : public Parent{
public:
    void getInfo(){
      cout << "child class\n";
    }

    void hello() {
      cout<< "hello from child\n";
    }
};
int main() {
  Child c1;
  c1.hello();
  return 0;
}

// Some Virtual Function Poperties:
// 1. Virtual function are Dynamic in nature.
// 2. Defined by the keyword "virtual" inside a base class and are always declared with a base class and overridden in a child class.
// 3. A virtual function is called during Runtime.
