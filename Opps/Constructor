// Constructor: Special method invoked automatically at time object creation. Used for Initialisation.

//   * Same name as class.
//   * Constructor doesn't have a return type.
//   * Only called once (automatically), at object creation
//   * Memory allocation happens when constructor is called.

// There are three types of constructors: Non-parameterised, Parameterised, Copy.


#include <iostream>
#include <string>
using namespace std;

class Teacher {
  // Properties / Attributes
private:
  double salary;

public:
  // Teacher(){
  //   cout<<"Hi, I am constructor\n";
  // }

// If you want automatic value set value then uses Constructor:

// This is Non-parameterized Constructor.
  // Teacher(){
  //      dept = "Computer Science";
  // }

// This is parameterized Constructor.
  Teacher(string n, string d, string s, double sal){
       name = n;
       dept = d;
       subject = s;
       salary = sal;
  }
  string name;
  string dept;
  string subject;

// Copy Constructor:
  Teacher(Teacher &orgObj){
      cout<< "I am custome copy constructor..../n";
      this->name = orgObj.name;
      this->dept = orgObj.dept;
      this->subject = orgObj.subject;
  }

  // Methods / Member functions
  // void changeDept(string newDept) {
  //   dept = newDept;
  // }

  // Setter method for salary
  // void setSalary(double newSalary) {
  //   salary = newSalary;
  // }

  // Getter method for salary
  // double getSalary() {
  //   return salary;
  // }
  void getinfo(){
    cout<<"name: "<<name << endl;
    cout<<"subject: "<<subject << endl;
  }
};

// class Student {
// public:
//   string name;
//   int rollno;
//   int age;
// };

int main() {
  // Teacher Object
  Teacher t1("Rao","computer science", "C++", 34000); // Constructor call only one time when object is created.
  // t1.name = "Rao";
  // t1.subject = "Maths";
  // t1.setSalary(5000);
  
  // t1.getinfo();

  // Output the Teacher details
  // cout << "Teacher Details:" << endl;
  // cout << "Name: " << t1.name << endl;
  // cout << "Subject: " << t1.subject << endl;
  // cout << "Department: " << t1.dept << endl;
  // cout << "Salary: " << t1.getSalary() << endl;

  // Change the department
  // t1.changeDept("Physics");

  // Output the updated department
  // cout << "Updated Department: " << t1.dept << endl;

  // Student Object
  // Student s1;
  // s1.name = "John";
  // s1.rollno = 101;
  // s1.age = 20;

  // Output the Student details
  // cout << "\nStudent Details:" << endl;
  // cout << "Name: " << s1.name << endl;
  // cout << "Roll No: " << s1.rollno << endl;
  // cout << "Age: " << s1.age << endl;

  // Copy Constructor: Special Constructor (default) used to copy properties of one object to another.
  
  Teacher t2(t1); // custom copy constructor -invoke
  t2.getinfo();

  return 0;
}

// This is a special pointer in C++ that points to the current object. this>prop is same as *(this).prop For example, this>name = name; this->dept = dept; write this is a object property and Right side is a constructor paremeter.

