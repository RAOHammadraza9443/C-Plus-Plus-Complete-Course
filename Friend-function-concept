// Simple friend function example:


#include<iostream>
using namespace std;
class y;
class x
{
int data;
public:
void setvalue(int value){
data = value;
}
friend void add(x,y);
};
class y{
    int num;
public:
void setvalue(int value){
num = value;
}
friend void add(x,y);
};
void add(x o1,y o2){
cout<<"sum data of x and y objects gives me "<< o1.data + o2.num;
}

int main(){
    x a1;
    a1.setvalue(34);
    y b1;
    b1.setvalue(32);
    add(a1,b1);
    return 0;
}

// Friend function :


#include <iostream>
using namespace std;
class complex
{
    int a, b;

public:
    void setnumber(int n1, int n2)
    {
        a = n1;
        b = n2;
    }
    // below line means that non member sumcomplex function is allowed to do anything wih my private parts (members)
    friend complex sumcomplex(complex o1, complex o2);
    void printnumber()
    {
        cout << "your number is " << a << " + " << b << "i" << endl;
    }
};
complex sumcomplex(complex o1, complex o2)
{
    complex o3;
    o3.setnumber((o1.a + o2.a), (o1.b + o2.b));
    return o3;
}
int main()
{
    complex c1, c2, sum;
    c1.setnumber(1, 4);
    c2.setnumber(5, 8);
    c1.printnumber();
    c2.printnumber();
    sum = sumcomplex(c1, c2);
    sum.printnumber();
    return 0;
}

// Friend function Diffcult example :


#include<iostream>
using namespace std;
class c2;
class c1{
    int val1;
    friend void exchange(c1 &,c2 &);
    public:
    void indata(int a){
        val1 = a;
    }
    void display(void){
        cout<< val1 <<endl;
    }
};
class c2{
    int val2;
    friend void exchange(c1 &,c2 &);
    public:
    void indata(int a){
        val2 = a;
    }
    void display(void){
        cout<<val2<<endl;
    }
};
void exchange(c1 & x,c2 & y){
    int temp = x.val1;
    x.val1 = y.val2;
    y.val2 = temp;
}
int main(){
   c1 oc1;
   c2 oc2;
   oc1.indata(23);
   oc2.indata(34);
   exchange(oc1, oc2); 
   cout<<"the value of c1 after exchanging becomes : ";
   oc1.display();
   cout<<"the value of c2 after exchanging becomes : ";
   oc2.display();
    return 0;
}
