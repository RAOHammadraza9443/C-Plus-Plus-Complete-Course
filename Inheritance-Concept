// Priveate-base-data-Inheritance


#include<iostream>
using namespace std;
class Base
{
    int data1;//private by default and is not inheritable
    public:
    int data2;
    void setData();
    int getData1();
    int getData2();
};
void Base :: setData(void)
{
    data1 = 10;
    data2 = 20;
}
int Base:: getData1()
{
    return data1;
}
int Base ::getData2()
{
    return data2;
}
class Derived : private Base{
    // class is being derived publically
    int data3;
    public:
    void process();
    void display();
};
void Derived :: process()
{
    setData();
    data3 = data2 * getData1();
}
void Derived ::display()
{
    cout<<"value of data 1 is "<<getData1()<<endl;
    cout<<"value of data 2 is "<<data2<<endl;
    cout<<"valude of data 3 is "<<data3<<endl;
}
int main(){
  Derived der;
    //der.setData();
    der.process();
    der.display();
    return 0;
}

// Protected-Access

#include<iostream>
using namespace std;

class Base{
    protected:
        int a; 
    private:
        int b;

};

class Derived: protected Base{
   
};

int main(){
    Base b;
    Derived d;
    // cout<<d.a; // Will not work since a is protected in both base as well as derived class
    return 0;
}

// Multiple-Inheritance

#include<iostream>
using namespace std;
class Base1{
protected:
    int base1int;

public:
    void set_base1int(int a)
    {
        base1int = a;
    }
};

class Base2{
protected:
    int base2int;

public:
    void set_base2int(int a)
    {
        base2int = a;
    }
};

class Base3{
protected:
    int base3int;

public:
    void set_base3int(int a)
    {
        base3int = a;
    }
};
class Derived : public Base1, public Base2, public Base3
{
    public: 
        void show(){
            cout << "The value of Base1 is " << base1int<<endl;
            cout << "The value of Base2 is " << base2int<<endl;
            cout << "The value of Base3 is " << base3int<<endl;
            cout << "The sum of these values is " << base1int + base2int + base3int << endl;
        }
};
int main()
{
    Derived harry;
    harry.set_base1int(25);
    harry.set_base2int(5);
    harry.set_base3int(15);
    harry.show();
    
    return 0;
}

// Multilevel-Inheritance

#include <iostream>
using namespace std;
class Student
{
protected:
    int roll_number;

public:
    void set_roll_number(int);
    void get_roll_number(void);
};

void Student ::set_roll_number(int r)
{
    roll_number = r;
}

void Student ::get_roll_number()
{
    cout << "The roll number is " << roll_number << endl;
}
class Exam : public Student
{
protected:
    float maths;
    float physics;

public:
    void set_marks(float, float);
    void get_marks(void);
};

void Exam ::set_marks(float m1, float m2)
{
    maths = m1;
    physics = m2;
}

void Exam ::get_marks()
{
    cout << "The marks obtained in maths are: " << maths << endl;
    cout << "The marks obtained in physics are: " << physics << endl;
}
class Result : public Exam
{
    float percentage;

public:
    void display_results()
    {
        get_roll_number();
        get_marks();
        cout << "Your result is " << (maths + physics) / 2 << "%" << endl;
    }
};
int main()
{
    Result harry;
    harry.set_roll_number(420);
    harry.set_marks(94.0, 90.0);
    harry.display_results();
    return 0;
}

// Example-Mutiple-Inheritance

#include<iostream>
using namespace std;
class Base1{
protected:
    int base1int;

public:
    void set_base1int(int n)
    {
        base1int = n;
    }
};

class Base2{
protected:
    int base2int;

public:
    void set_base2int(int n)
    {
        base2int = n;
    }
};

class Base3{
protected:
    int base3int;

public:
    void set_base3int(int n)
    {
        base3int = n;
    }
};
class Derived : public Base1, public Base2, public Base3
{
    public: 
        void show(){
            cout << "The value of Base1 is " << base1int<<endl;
            cout << "The value of Base2 is " << base2int<<endl;
            cout << "The value of Base3 is " << base3int<<endl;
cout << "The sum of these values is " << base1int + base2int + base3int << endl;
        }
};
int main()
{
    Derived harry;
    harry.set_base1int(2523);
    harry.set_base2int(52332);
    harry.set_base3int(1523);
    harry.show();
    
    return 0;
}
